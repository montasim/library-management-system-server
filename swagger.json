{
  "openapi": "3.0.0",
  "info": {
    "title": "Express API for My Application",
    "version": "1.0.0",
    "description": "This is the swagger doc for the API"
  },
  "servers": [
    {
      "url": "http://localhost:5000/api/v1",
      "description": "Development server",
      "variables": {
        "version": {
          "default": "v1"
        }
      }
    }
  ],
  "paths": {
    "/": {
      "post": {
        "summary": "Create pronouns",
        "description": "Creates a new set of pronouns, accessible only to users with admin permissions.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string",
                    "description": "Email address for the new admin."
                  },
                  "password": {
                    "type": "string",
                    "description": "Password for the new admin account."
                  },
                  "name": {
                    "type": "string",
                    "description": "The name of the pronouns set."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Pronouns created successfully."
          },
          "400": {
            "description": "Bad request, e.g., missing name or pronouns already exist."
          },
          "403": {
            "description": "Email already registered as a user."
          },
          "409": {
            "description": "Email already registered."
          }
        },
        "tags": ["Pronouns Management"]
      },
      "all": {
        "summary": "Handles unsupported methods.",
        "description": "Returns an error if an unsupported HTTP method is used on this route.",
        "responses": {
          "405": {
            "description": "Method not supported."
          }
        },
        "tags": ["Error Testing"]
      },
      "delete": {
        "summary": "Delete multiple pronouns",
        "description": "Deletes a list of pronouns based on their IDs, accessible only to admin users.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "properties": {
                  "userId": {
                    "type": "string",
                    "description": "ID of the user returning the book."
                  },
                  "bookId": {
                    "type": "string",
                    "description": "ID of the book being returned."
                  },
                  "remarks": {
                    "type": "string",
                    "description": "Optional remarks about the book return."
                  }
                },
                "items": {
                  "type": "string"
                },
                "description": "Array of pronouns IDs to delete."
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Pronouns deleted successfully."
          },
          "400": {
            "description": "Bad request, e.g., some IDs do not exist."
          },
          "404": {
            "description": "No lending record found for this book by the specified user."
          },
          "500": {
            "description": "Internal server error, failed to process the return."
          }
        },
        "tags": ["Pronouns Management"]
      },
      "get": {
        "summary": "Test uncaught exception simulation.",
        "description": "Triggers an uncaught exception to test the system's error handling capabilities.",
        "responses": {
          "200": {
            "description": "System is operational.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "language": {
                      "type": "string",
                      "description": "Preferred language of the user extracted from the 'Accept-Language' header."
                    },
                    "os": {
                      "type": "string",
                      "description": "Operating system of the user's device."
                    },
                    "ip": {
                      "type": "string",
                      "description": "IP address of the user."
                    },
                    "device": {
                      "type": "string",
                      "description": "Type of device used, such as Desktop, Tablet, Mobile, or Unknown."
                    },
                    "browser": {
                      "type": "string",
                      "description": "Browser used by the user."
                    },
                    "browserVersion": {
                      "type": "string",
                      "description": "Version of the browser."
                    },
                    "timeZone": {
                      "type": "string",
                      "description": "Time zone of the user based on browser settings."
                    },
                    "referrer": {
                      "type": "string",
                      "description": "Referrer URL if the request came from another site."
                    },
                    "cookies": {
                      "type": "string",
                      "description": "Raw cookie header from the request."
                    },
                    "geo": {
                      "type": "object",
                      "description": "Optional geolocation data based on the user's IP address.",
                      "properties": {
                        "country": {
                          "type": "string",
                          "description": "Country derived from the IP address."
                        },
                        "region": {
                          "type": "string",
                          "description": "Region derived from the IP address."
                        },
                        "city": {
                          "type": "string",
                          "description": "City derived from the IP address."
                        }
                      }
                    },
                    "message": {
                      "type": "string"
                    },
                    "version": {
                      "type": "string"
                    },
                    "license": {
                      "type": "string"
                    },
                    "description": {
                      "type": "string"
                    },
                    "engines": {
                      "type": "object",
                      "properties": {
                        "node": {
                          "type": "string"
                        },
                        "yarn": {
                          "type": "string"
                        }
                      }
                    },
                    "homepage": {
                      "type": "string"
                    },
                    "bugs": {
                      "type": "string"
                    },
                    "environment": {
                      "type": "object",
                      "properties": {
                        "current": {
                          "type": "string"
                        },
                        "apiVersion": {
                          "type": "string"
                        }
                      }
                    },
                    "support": {
                      "type": "object",
                      "properties": {
                        "email": {
                          "type": "string"
                        }
                      }
                    },
                    "author": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string"
                        },
                        "email": {
                          "type": "string"
                        },
                        "mobile": {
                          "type": "string"
                        },
                        "linkedin": {
                          "type": "string"
                        },
                        "github": {
                          "type": "string"
                        }
                      }
                    },
                    "status": {
                      "type": "string",
                      "example": "Success"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Simulated uncaught exception."
          }
        },
        "tags": ["Home"]
      }
    },
    "/verify/{token}": {
      "get": {
        "summary": "Verify Email",
        "description": "Verifies a user's email using a token.",
        "parameters": [
          {
            "in": "path",
            "name": "token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Verification token sent to the user's email."
          }
        ],
        "responses": {
          "200": {
            "description": "Email verified successfully."
          },
          "403": {
            "description": "Invalid or expired token."
          }
        },
        "tags": ["Authentication"]
      },
      "all": {
        "summary": "Handles unsupported methods.",
        "description": "Returns an error if an unsupported HTTP method is used.",
        "responses": {
          "405": {
            "description": "Method not supported."
          }
        },
        "tags": ["Authentication"]
      }
    },
    "/resend-verification/{id}": {
      "get": {
        "summary": "Resend Verification Email",
        "description": "Resends the verification email to the user based on the user ID provided.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Unique identifier of the user."
          }
        ],
        "responses": {
          "200": {
            "description": "Verification email resent successfully."
          },
          "403": {
            "description": "Email already verified."
          },
          "404": {
            "description": "User not found."
          }
        },
        "tags": ["Authentication"]
      },
      "all": {
        "summary": "Handles unsupported methods.",
        "description": "Returns an error if an unsupported HTTP method is used.",
        "responses": {
          "405": {
            "description": "Method not supported."
          }
        },
        "tags": ["Authentication"]
      }
    },
    "/requestBooks-new-password": {
      "put": {
        "summary": "Requests a new admin password.",
        "description": "Initiates a password reset process for an admin.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string",
                    "description": "Email address of the admin."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Password reset email sent successfully."
          },
          "401": {
            "description": "Email not verified."
          },
          "404": {
            "description": "No account found with that email address."
          }
        },
        "tags": ["Admin Management"]
      },
      "all": {
        "summary": "Handles unsupported methods.",
        "description": "Returns an error if an unsupported HTTP method is used.",
        "responses": {
          "405": {
            "description": "Method not supported."
          }
        },
        "tags": ["Admin Management"]
      }
    },
    "/reset-password/{token}": {
      "put": {
        "summary": "Reset Password",
        "description": "Allows a user to reset their password using a valid token received via email.",
        "parameters": [
          {
            "in": "path",
            "name": "token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Token received for resetting the password."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "newPassword": {
                    "type": "string",
                    "description": "New password for the user."
                  },
                  "confirmNewPassword": {
                    "type": "string",
                    "description": "Confirmation of the new password."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Password reset successfully."
          },
          "403": {
            "description": "Invalid or expired token."
          }
        },
        "tags": ["Authentication"]
      },
      "all": {
        "summary": "Handles unsupported methods.",
        "description": "Returns an error if an unsupported HTTP method is used.",
        "responses": {
          "405": {
            "description": "Method not supported."
          }
        },
        "tags": ["Authentication"]
      }
    },
    "/login": {
      "post": {
        "summary": "Login",
        "description": "Authenticates a user and returns a token.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string",
                    "description": "Email address of the user."
                  },
                  "password": {
                    "type": "string",
                    "description": "Password of the user."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Authentication successful."
          },
          "401": {
            "description": "Authentication failed."
          },
          "404": {
            "description": "No account found with that email address."
          }
        },
        "tags": ["Authentication"]
      },
      "all": {
        "summary": "Handles unsupported methods.",
        "description": "Returns an error if an unsupported HTTP method is used.",
        "responses": {
          "405": {
            "description": "Method not supported."
          }
        },
        "tags": ["Authentication"]
      }
    },
    "/logout": {
      "get": {
        "summary": "Logout",
        "description": "Logs out a user and invalidates the session token.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Logout successful."
          },
          "401": {
            "description": "User not logged in."
          }
        },
        "tags": ["Authentication"]
      },
      "all": {
        "summary": "Handles unsupported methods.",
        "description": "Returns an error if an unsupported HTTP method is used.",
        "responses": {
          "405": {
            "description": "Method not supported."
          }
        },
        "tags": ["Authentication"]
      }
    },
    "/request-new-password": {
      "put": {
        "summary": "Request New Password",
        "description": "Initiates a password reset process for a user by sending them an email with a reset link.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string",
                    "description": "Email address associated with the user account."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Reset email sent successfully."
          },
          "404": {
            "description": "No user found with this email."
          }
        },
        "tags": ["Authentication"]
      },
      "all": {
        "summary": "Handles unsupported methods.",
        "description": "Returns an error if an unsupported HTTP method is used.",
        "responses": {
          "405": {
            "description": "Method not supported."
          }
        },
        "tags": ["Authentication"]
      }
    },
    "/signup": {
      "post": {
        "summary": "Sign Up",
        "description": "Registers a new user and sends a verification email.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string",
                    "description": "Email address for the new user."
                  },
                  "password": {
                    "type": "string",
                    "description": "Password for the new user."
                  },
                  "confirmPassword": {
                    "type": "string",
                    "description": "Confirmation of the password."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User registered successfully."
          },
          "400": {
            "description": "Invalid data provided."
          },
          "409": {
            "description": "Email already in use."
          }
        },
        "tags": ["Authentication"]
      },
      "all": {
        "summary": "Handles unsupported methods.",
        "description": "Returns an error if an unsupported HTTP method is used.",
        "responses": {
          "405": {
            "description": "Method not supported."
          }
        },
        "tags": ["Authentication"]
      }
    },
    "/books/": {
      "post": {
        "summary": "Create a new book.",
        "description": "This endpoint allows admin users to create a new book record, including uploading an image for the book.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Name of the book."
                  },
                  "writer": {
                    "type": "string",
                    "description": "ID of the writer."
                  },
                  "publication": {
                    "type": "string",
                    "description": "ID of the publication."
                  },
                  "image": {
                    "type": "string",
                    "format": "binary",
                    "description": "Image file for the book."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Book created successfully."
          },
          "400": {
            "description": "Validation error or bad request."
          }
        },
        "tags": ["Book Management"]
      },
      "get": {
        "summary": "Get a list of books.",
        "description": "Retrieves a list of books based on optional query parameters.",
        "responses": {
          "200": {
            "description": "A list of books.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Book"
                  }
                }
              }
            }
          }
        },
        "tags": ["Book Management"]
      },
      "delete": {
        "summary": "Delete multiple books.",
        "description": "Allows admin users to delete multiple books based on a list of book IDs.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "bookIds": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "List of book IDs to delete."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Books deleted successfully."
          }
        },
        "tags": ["Book Management"]
      },
      "all": {
        "summary": "Handles unsupported methods for the main books route.",
        "responses": {
          "405": {
            "description": "Method not supported."
          }
        },
        "tags": ["Book Management"]
      }
    },
    "/books/{bookId}": {
      "get": {
        "summary": "Get a book by ID.",
        "description": "Retrieves detailed information about a specific book by its ID.",
        "parameters": [
          {
            "in": "path",
            "name": "bookId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the book to retrieve."
          }
        ],
        "responses": {
          "200": {
            "description": "Detailed book information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Book"
                }
              }
            }
          }
        },
        "tags": ["Book Management"]
      },
      "put": {
        "summary": "Update a book by ID.",
        "description": "Updates details of a book including the option to update the image.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "bookId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the book to update."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "writer": {
                    "type": "string"
                  },
                  "publication": {
                    "type": "string"
                  },
                  "image": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Book updated successfully."
          },
          "404": {
            "description": "Book not found."
          }
        },
        "tags": ["Book Management"]
      },
      "delete": {
        "summary": "Delete a book by ID.",
        "description": "Deletes a single book by its ID.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "bookId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the book to delete."
          }
        ],
        "responses": {
          "200": {
            "description": "Book deleted successfully."
          }
        },
        "tags": ["Book Management"]
      },
      "all": {
        "summary": "Handles unsupported methods for the book ID route.",
        "responses": {
          "405": {
            "description": "Method not supported."
          }
        },
        "tags": ["Book Management"]
      }
    },
    "/desired-books": {
      "get": {
        "summary": "Retrieves a list of desired books.",
        "description": "Retrieves a list of the top 10 most desired books based on user requests. This endpoint uses MongoDB aggregation to fetch details of the most requested books.",
        "responses": {
          "200": {
            "description": "A list of desired books successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "The response status."
                    },
                    "message": {
                      "type": "string",
                      "description": "A message describing the outcome of the operation."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "bookDetails": {
                            "type": "object",
                            "description": "Details of the book."
                          },
                          "count": {
                            "type": "integer",
                            "description": "The number of times the book has been requested."
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "No desired books found at the moment."
          },
          "500": {
            "description": "Internal server error when attempting to fetch desired books."
          }
        },
        "tags": ["Book Management"]
      },
      "all": {
        "summary": "Handles unsupported methods for the desired books endpoint.",
        "description": "Returns an error if an unsupported HTTP method is used on the desired books endpoint.",
        "responses": {
          "405": {
            "description": "Method not supported."
          }
        },
        "tags": ["Book Management"]
      }
    },
    "/favouriteBooks": {
      "get": {
        "summary": "Retrieves the list of favourite books.",
        "description": "Fetches a list of favourite books for the authenticated user.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "List of favourite books retrieved successfully."
          },
          "404": {
            "description": "No favourite books found."
          }
        },
        "tags": ["Favourite Books"]
      },
      "all": {
        "summary": "Handles unsupported methods for the root route.",
        "description": "Returns an error if an unsupported HTTP method is used on the root route.",
        "responses": {
          "405": {
            "description": "Method not supported."
          }
        },
        "tags": ["Favourite Books"]
      }
    },
    "/favouriteBooks/{bookId}": {
      "post": {
        "summary": "Adds a book to favourite.",
        "description": "Adds a specified book to the favourite list of the authenticated user.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "bookId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the book to be added to favourites."
          }
        ],
        "requestBody": {
          "required": false
        },
        "responses": {
          "201": {
            "description": "Book added to favourites successfully."
          },
          "404": {
            "description": "No book found with the provided ID."
          },
          "409": {
            "description": "Book already in favourites."
          }
        },
        "tags": ["Favourite Books"]
      },
      "delete": {
        "summary": "Removes a book from favourites.",
        "description": "Removes a specified book from the favourite list of the authenticated user.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "bookId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the book to be removed from favourites."
          }
        ],
        "responses": {
          "200": {
            "description": "Book removed from favourites successfully."
          },
          "404": {
            "description": "No favourite book found to remove or Book not found in your favourites."
          }
        },
        "tags": ["Favourite Books"]
      },
      "all": {
        "summary": "Handles unsupported methods for book-specific routes.",
        "description": "Returns an error if an unsupported HTTP method is used on book-specific routes.",
        "responses": {
          "405": {
            "description": "Method not supported."
          }
        },
        "tags": ["Favourite Books"]
      }
    },
    "/booksHistory/": {
      "get": {
        "summary": "Retrieve the history of books.",
        "description": "Fetches the history of books based on query parameters including pagination and sorting.",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer"
            },
            "description": "Page number for pagination."
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer"
            },
            "description": "Limit for the number of records per page."
          },
          {
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string"
            },
            "description": "Sort order and field."
          },
          {
            "in": "query",
            "name": "bookId",
            "schema": {
              "type": "string"
            },
            "description": "Filter by book ID."
          },
          {
            "in": "query",
            "name": "user",
            "schema": {
              "type": "string"
            },
            "description": "Filter by user ID."
          },
          {
            "in": "query",
            "name": "from",
            "schema": {
              "type": "string"
            },
            "description": "Start date for filtering the lending period."
          },
          {
            "in": "query",
            "name": "to",
            "schema": {
              "type": "string"
            },
            "description": "End date for filtering the lending period."
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the history of books."
          },
          "404": {
            "description": "No books history found."
          }
        },
        "tags": ["Books History Management"]
      },
      "all": {
        "summary": "Handles unsupported methods for the root route.",
        "description": "Returns an error if an unsupported HTTP method is used on the root route.",
        "responses": {
          "405": {
            "description": "Method not supported."
          }
        },
        "tags": ["Books History Management"]
      }
    },
    "/booksHistory/{bookId}": {
      "get": {
        "summary": "Retrieve the history of a specific book.",
        "description": "Fetches the history of a specified book by its ID.",
        "parameters": [
          {
            "in": "path",
            "name": "bookId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the book to retrieve history for."
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the history for the specified book."
          },
          "404": {
            "description": "No book history found for the specified ID."
          }
        },
        "tags": ["Books History Management"]
      },
      "all": {
        "summary": "Handles unsupported methods for the book ID route.",
        "description": "Returns an error if an unsupported HTTP method is used on the book ID route.",
        "responses": {
          "405": {
            "description": "Method not supported."
          }
        },
        "tags": ["Books History Management"]
      }
    },
    "/lend-books": {
      "post": {
        "summary": "Creates a lend book record.",
        "description": "Creates a new lend book record with the provided data. Access is limited to admins.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "user": {
                    "type": "string",
                    "description": "User ID of the lender."
                  },
                  "bookId": {
                    "type": "string",
                    "description": "Book ID of the book to lend."
                  },
                  "from": {
                    "type": "string",
                    "format": "date",
                    "description": "Start date of the lending period."
                  },
                  "to": {
                    "type": "string",
                    "format": "date",
                    "description": "End date of the lending period."
                  },
                  "remarks": {
                    "type": "string",
                    "description": "Additional remarks about the lending."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Lend book record created successfully."
          },
          "400": {
            "description": "Invalid date provided for 'from' or 'to'."
          },
          "404": {
            "description": "No book or user found with the provided ID."
          },
          "409": {
            "description": "Book is already lent or already in your lend list."
          }
        },
        "tags": ["Lend Books Management"]
      },
      "get": {
        "summary": "Retrieves all lend book records.",
        "description": "Retrieves all lend book records for the authenticated admin user.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved lend book records.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "total": {
                      "type": "integer",
                      "description": "Total number of lend books."
                    },
                    "lendBooks": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/LendBook"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "No lend books found."
          }
        },
        "tags": ["Lend Books Management"]
      },
      "all": {
        "summary": "Handles unsupported methods.",
        "description": "Returns an error if an unsupported HTTP method is used.",
        "responses": {
          "405": {
            "description": "Method not supported."
          }
        },
        "tags": ["Lend Books Management"]
      }
    },
    "/request-books": {
      "post": {
        "summary": "Create a new book request.",
        "description": "Allows a user to create a new book request. This operation requires an image upload and user authentication.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "image": {
                    "type": "string",
                    "format": "binary",
                    "description": "Image of the requested book."
                  },
                  "title": {
                    "type": "string",
                    "description": "Title of the requested book."
                  },
                  "author": {
                    "type": "string",
                    "description": "Author of the requested book."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Book request created successfully."
          },
          "400": {
            "description": "Invalid request data."
          }
        },
        "tags": ["Request Books"]
      },
      "get": {
        "summary": "Retrieve all book requests.",
        "description": "Fetches all book requests. Accessible only to admins.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved all book requests."
          },
          "404": {
            "description": "No book requests found."
          }
        },
        "tags": ["Request Books"]
      },
      "all": {
        "summary": "Handles unsupported methods.",
        "description": "Returns an error if an unsupported HTTP method is used.",
        "responses": {
          "405": {
            "description": "Method not supported."
          }
        },
        "tags": ["Request Books"]
      }
    },
    "/request-books/{bookId}": {
      "get": {
        "summary": "Retrieve a book request by ID.",
        "description": "Fetches a specific book request by its ID. Accessible only to admins.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "bookId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the book request."
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the book request."
          },
          "404": {
            "description": "Book request not found."
          }
        },
        "tags": ["Request Books"]
      },
      "all": {
        "summary": "Handles unsupported methods.",
        "description": "Returns an error if an unsupported HTTP method is used.",
        "responses": {
          "405": {
            "description": "Method not supported."
          }
        },
        "tags": ["Request Books"]
      }
    },
    "/request-books/owner/{ownerId}": {
      "get": {
        "summary": "Retrieve book requests by owner ID.",
        "description": "Fetches all book requests associated with a specific owner ID. Accessible only to admins.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ownerId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the book request owner."
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved book requests for the specified owner."
          },
          "404": {
            "description": "No book requests found for this owner."
          }
        },
        "tags": ["Request Books"]
      },
      "all": {
        "summary": "Handles unsupported methods.",
        "description": "Returns an error if an unsupported HTTP method is used.",
        "responses": {
          "405": {
            "description": "Method not supported."
          }
        },
        "tags": ["Request Books"]
      }
    },
    "/permissions/": {
      "post": {
        "summary": "Creates a new permission.",
        "description": "Creates a new permission record. This endpoint is accessible only to users with admin permissions.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The name of the permission."
                  },
                  "description": {
                    "type": "string",
                    "description": "A brief description of the permission."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Permission created successfully."
          },
          "400": {
            "description": "Invalid input data."
          }
        },
        "tags": ["Permissions Management"]
      },
      "get": {
        "summary": "Retrieves a list of permissions.",
        "description": "Fetches a list of permissions, optionally filtered by various criteria.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "A list of permissions.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string"
                      },
                      "description": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "tags": ["Permissions Management"]
      },
      "delete": {
        "summary": "Deletes multiple permissions.",
        "description": "Deletes a list of permissions based on provided identifiers.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "ids": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "Array of permission IDs to delete."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Permissions deleted successfully."
          },
          "400": {
            "description": "Invalid request format."
          }
        },
        "tags": ["Permissions Management"]
      },
      "all": {
        "summary": "Handles unsupported methods for the permissions endpoint.",
        "responses": {
          "405": {
            "description": "Method not supported."
          }
        },
        "tags": ["Permissions Management"]
      }
    },
    "/permissions/default": {
      "post": {
        "summary": "Creates default permission set.",
        "description": "Generates and assigns default permissions.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "201": {
            "description": "Default permissions created successfully."
          }
        },
        "tags": ["Permissions Management"]
      },
      "all": {
        "summary": "Handles unsupported methods for the default permissions endpoint.",
        "responses": {
          "405": {
            "description": "Method not supported."
          }
        },
        "tags": ["Permissions Management"]
      }
    },
    "/permissions/{id}": {
      "get": {
        "summary": "Retrieves a permission by ID.",
        "description": "Fetches details of a specific permission by its ID.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the permission."
          }
        ],
        "responses": {
          "200": {
            "description": "Permission details retrieved successfully."
          },
          "404": {
            "description": "Permission not found."
          }
        },
        "tags": ["Permissions Management"]
      },
      "put": {
        "summary": "Updates a permission by ID.",
        "description": "Modifies details of a specific permission using its ID.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Updated name of the permission."
                  },
                  "description": {
                    "type": "string",
                    "description": "Updated description of the permission."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Permission updated successfully."
          },
          "404": {
            "description": "Permission not found."
          }
        },
        "tags": ["Permissions Management"]
      },
      "delete": {
        "summary": "Deletes a permission by ID.",
        "description": "Removes a specific permission using its ID.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the permission to delete."
          }
        ],
        "responses": {
          "200": {
            "description": "Permission deleted successfully."
          },
          "404": {
            "description": "Permission not found."
          }
        },
        "tags": ["Permissions Management"]
      },
      "all": {
        "summary": "Handles unsupported methods for permission ID specific endpoint.",
        "responses": {
          "405": {
            "description": "Method not supported."
          }
        },
        "tags": ["Permissions Management"]
      }
    },
    "/{id}": {
      "get": {
        "summary": "Retrieve pronouns by ID",
        "description": "Retrieves a single set of pronouns by ID, results can be cached.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the pronouns to retrieve."
          }
        ],
        "responses": {
          "200": {
            "description": "Pronouns retrieved successfully."
          },
          "404": {
            "description": "Pronouns not found."
          }
        },
        "tags": ["Pronouns Management"]
      },
      "put": {
        "summary": "Update pronouns by ID",
        "description": "Updates an existing set of pronouns by ID, accessible only to admin users.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the pronouns to update."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The new name for the pronouns set."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Pronouns updated successfully."
          },
          "400": {
            "description": "Bad request, e.g., duplicate name."
          },
          "404": {
            "description": "Pronouns not found."
          }
        },
        "tags": ["Pronouns Management"]
      },
      "delete": {
        "summary": "Delete pronouns by ID",
        "description": "Deletes a single set of pronouns by ID, accessible only to admin users.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the pronouns to delete."
          }
        ],
        "responses": {
          "200": {
            "description": "Pronouns deleted successfully."
          },
          "404": {
            "description": "Pronouns not found."
          }
        },
        "tags": ["Pronouns Management"]
      },
      "all": {
        "summary": "Method not supported",
        "responses": {
          "405": {
            "description": "HTTP method not supported."
          }
        },
        "tags": ["Pronouns Management"]
      }
    },
    "/publications/": {
      "post": {
        "summary": "Creates a new publication.",
        "description": "This endpoint allows admin users to create new publications. It checks for existing publications with the same name and ensures unique entries.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Name of the publication."
                  },
                  "description": {
                    "type": "string",
                    "description": "Detailed description of the publication."
                  },
                  "isActive": {
                    "type": "boolean",
                    "description": "Status of the publication's activity."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Publication created successfully."
          },
          "400": {
            "description": "Publication with the same name already exists."
          },
          "401": {
            "description": "Unauthorized access."
          }
        },
        "tags": ["Publications Management"]
      },
      "get": {
        "summary": "Retrieves a list of publications.",
        "description": "This endpoint returns a list of all publications. It supports caching for efficient data retrieval.",
        "responses": {
          "200": {
            "description": "A list of publications.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Publication"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access."
          }
        },
        "tags": ["Publications Management"]
      },
      "delete": {
        "summary": "Deletes multiple publications.",
        "description": "This endpoint allows admin users to delete multiple publications based on a list of IDs.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "publicationIds": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "List of publication IDs to delete."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Publications deleted successfully."
          },
          "400": {
            "description": "Invalid publication IDs provided."
          },
          "401": {
            "description": "Unauthorized access."
          }
        },
        "tags": ["Publications Management"]
      },
      "all": {
        "summary": "Handles unsupported methods for the base route.",
        "description": "Returns an error if an unsupported HTTP method is used on the base route.",
        "responses": {
          "405": {
            "description": "Method not supported."
          }
        },
        "tags": ["Publications Management"]
      }
    },
    "/publications/{id}": {
      "get": {
        "summary": "Retrieves a specific publication by ID.",
        "description": "This endpoint returns a single publication based on the ID provided. It supports caching for efficient data retrieval.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the publication to retrieve."
          }
        ],
        "responses": {
          "200": {
            "description": "Detailed information about the publication."
          },
          "401": {
            "description": "Unauthorized access."
          },
          "404": {
            "description": "Publication not found."
          }
        },
        "tags": ["Publications Management"]
      },
      "put": {
        "summary": "Updates a specific publication by ID.",
        "description": "This endpoint allows admin users to update details of a specific publication by ID.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the publication to update."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Updated name of the publication."
                  },
                  "description": {
                    "type": "string",
                    "description": "Updated description of the publication."
                  },
                  "isActive": {
                    "type": "boolean",
                    "description": "Updated status of the publication's activity."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Publication updated successfully."
          },
          "400": {
            "description": "Invalid input data."
          },
          "401": {
            "description": "Unauthorized access."
          },
          "404": {
            "description": "Publication not found."
          }
        },
        "tags": ["Publications Management"]
      },
      "delete": {
        "summary": "Deletes a specific publication by ID.",
        "description": "This endpoint allows admin users to delete a specific publication by ID.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the publication to delete."
          }
        ],
        "responses": {
          "200": {
            "description": "Publication deleted successfully."
          },
          "401": {
            "description": "Unauthorized access."
          },
          "404": {
            "description": "Publication not found."
          }
        },
        "tags": ["Publications Management"]
      },
      "all": {
        "summary": "Handles unsupported methods for the ID-specific route.",
        "description": "Returns an error if an unsupported HTTP method is used on the ID-specific route.",
        "responses": {
          "405": {
            "description": "Method not supported."
          }
        },
        "tags": ["Publications Management"]
      }
    },
    "/roles": {
      "post": {
        "summary": "Creates a new role.",
        "description": "Creates a new role with specified permissions. This endpoint requires admin permissions.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Role"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Role created successfully."
          },
          "400": {
            "description": "Invalid data provided."
          }
        },
        "tags": ["Role Management"]
      },
      "get": {
        "summary": "Retrieves a list of roles.",
        "description": "Fetches a list of roles based on pagination and filters. Requires admin permissions.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer"
            },
            "description": "Page number of the roles list"
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer"
            },
            "description": "Number of roles per page"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of roles.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Role"
                  }
                }
              }
            }
          },
          "404": {
            "description": "No roles found."
          }
        },
        "tags": ["Role Management"]
      },
      "delete": {
        "summary": "Deletes a list of roles by IDs.",
        "description": "Deletes roles based on a list of IDs provided in the request. Requires admin permissions.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "ids": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "List of role IDs to delete"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Roles deleted successfully."
          },
          "400": {
            "description": "Invalid request format."
          }
        },
        "tags": ["Role Management"]
      },
      "all": {
        "summary": "Handles unsupported methods.",
        "description": "Returns an error if an unsupported HTTP method is used.",
        "responses": {
          "405": {
            "description": "Method not supported."
          }
        },
        "tags": ["Role Management"]
      }
    },
    "/roles/default": {
      "post": {
        "summary": "Creates or updates the default role.",
        "description": "Creates or updates the default role with all available permissions. Requires admin permissions.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "201": {
            "description": "Default role created or updated successfully."
          },
          "400": {
            "description": "Failed to create or update the default role."
          }
        },
        "tags": ["Role Management"]
      },
      "all": {
        "summary": "Handles unsupported methods.",
        "description": "Returns an error if an unsupported HTTP method is used.",
        "responses": {
          "405": {
            "description": "Method not supported."
          }
        },
        "tags": ["Role Management"]
      }
    },
    "/roles/{roleId}": {
      "get": {
        "summary": "Retrieves a role by ID.",
        "description": "Fetches a role by its ID. Requires admin permissions.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "roleId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the role to retrieve."
          }
        ],
        "responses": {
          "200": {
            "description": "Role retrieved successfully."
          },
          "404": {
            "description": "Role not found."
          }
        },
        "tags": ["Role Management"]
      },
      "put": {
        "summary": "Updates a role by ID.",
        "description": "Updates the specified role's details by ID. Requires admin permissions.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Role"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Role updated successfully."
          },
          "404": {
            "description": "Role not found."
          }
        },
        "tags": ["Role Management"]
      },
      "delete": {
        "summary": "Deletes a role by ID.",
        "description": "Deletes the specified role by its ID. Requires admin permissions.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Role deleted successfully."
          },
          "404": {
            "description": "Role not found."
          }
        },
        "tags": ["Role Management"]
      },
      "all": {
        "summary": "Handles unsupported methods.",
        "description": "Returns an error if an unsupported HTTP method is used.",
        "responses": {
          "405": {
            "description": "Method not supported."
          }
        },
        "tags": ["Role Management"]
      }
    },
    "/subjects": {
      "post": {
        "summary": "Creates a new subject.",
        "description": "Adds a new subject to the database. This endpoint is accessible only to users with admin permissions.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Name of the subject."
                  },
                  "description": {
                    "type": "string",
                    "description": "Description of the subject."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Subject created successfully."
          },
          "400": {
            "description": "Bad request if the subject information is incomplete or invalid."
          }
        },
        "tags": ["Subject Management"]
      },
      "get": {
        "summary": "Retrieves a list of subjects.",
        "description": "Returns a list of all subjects, optionally filtered by various parameters.",
        "responses": {
          "200": {
            "description": "A list of subjects."
          },
          "204": {
            "description": "No content if there are no subjects."
          }
        },
        "tags": ["Subject Management"]
      },
      "delete": {
        "summary": "Deletes multiple subjects.",
        "description": "Deletes a list of subjects identified by their IDs. This endpoint is accessible only to users with admin permissions.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "ids": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "Array of subject IDs to be deleted."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Subjects deleted successfully."
          },
          "400": {
            "description": "Bad request if the IDs are not provided or invalid."
          }
        },
        "tags": ["Subject Management"]
      },
      "all": {
        "summary": "Handles unsupported methods for the root subjects route.",
        "responses": {
          "405": {
            "description": "Method not supported."
          }
        },
        "tags": ["Subject Management"]
      }
    },
    "/subjects/{subjectId}": {
      "get": {
        "summary": "Retrieves a subject by ID.",
        "description": "Returns a single subject by its ID.",
        "parameters": [
          {
            "in": "path",
            "name": "subjectId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the subject to retrieve."
          }
        ],
        "responses": {
          "200": {
            "description": "Subject retrieved successfully."
          },
          "404": {
            "description": "Subject not found."
          }
        },
        "tags": ["Subject Management"]
      },
      "put": {
        "summary": "Updates a subject by ID.",
        "description": "Updates details of an existing subject. This endpoint is accessible only to users with admin permissions.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "subjectId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the subject to update."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Name of the subject."
                  },
                  "description": {
                    "type": "string",
                    "description": "Description of the subject."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Subject updated successfully."
          },
          "400": {
            "description": "Bad request if the update data is incomplete or invalid."
          },
          "404": {
            "description": "Subject not found."
          }
        },
        "tags": ["Subject Management"]
      },
      "delete": {
        "summary": "Deletes a subject by ID.",
        "description": "Deletes a single subject by its ID. This endpoint is accessible only to users with admin permissions.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "subjectId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the subject to delete."
          }
        ],
        "responses": {
          "200": {
            "description": "Subject deleted successfully."
          },
          "404": {
            "description": "Subject not found."
          }
        },
        "tags": ["Subject Management"]
      },
      "all": {
        "summary": "Handles unsupported methods for individual subject route.",
        "responses": {
          "405": {
            "description": "Method not supported."
          }
        },
        "tags": ["Subject Management"]
      }
    },
    "/trending-books": {
      "get": {
        "summary": "Retrieves a list of trending books.",
        "description": "Provides a list of books that are currently trending based on user favourites.",
        "responses": {
          "200": {
            "description": "A list of trending books successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Book"
                  }
                }
              }
            }
          },
          "404": {
            "description": "No trending books found."
          },
          "500": {
            "description": "Server error encountered while retrieving trending books."
          }
        },
        "tags": ["Books"]
      },
      "all": {
        "summary": "Handles unsupported methods.",
        "description": "Returns an error if an unsupported HTTP method is used.",
        "responses": {
          "405": {
            "description": "Method not supported."
          }
        },
        "tags": ["Books"]
      }
    },
    "/{username}": {
      "get": {
        "summary": "Retrieve user profile by username.",
        "description": "Fetches the user profile based on the provided username. This endpoint respects the user's privacy settings and only returns information allowed under those settings.",
        "parameters": [
          {
            "in": "path",
            "name": "username",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The username of the user whose profile is being requested."
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "User profile retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "username": {
                      "type": "string"
                    },
                    "email": {
                      "type": "string"
                    },
                    "bio": {
                      "type": "string"
                    }
                  },
                  "example": {
                    "username": "johndoe",
                    "email": "johndoe@example.com",
                    "bio": "Here is a little about me..."
                  }
                }
              }
            }
          },
          "403": {
            "description": "Access to the profile is forbidden."
          },
          "404": {
            "description": "User not found."
          }
        },
        "tags": ["User Profile Management"]
      },
      "all": {
        "summary": "Handles unsupported methods.",
        "description": "Returns an error if an unsupported HTTP method is used.",
        "responses": {
          "405": {
            "description": "Method not supported."
          }
        },
        "tags": ["User Profile Management"]
      }
    },
    "/recently-visited-books": {
      "post": {
        "summary": "Adds a book to the recently visited list.",
        "description": "Adds a new book to the user's list of recently visited books, ensuring it does not exceed 10 books.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "book": {
                    "type": "string",
                    "description": "The ID of the book to add to the recently visited list."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Book added to recently visited list successfully."
          },
          "400": {
            "description": "Invalid book ID or book already in list."
          },
          "401": {
            "description": "Unauthorized if the user is not authenticated."
          },
          "404": {
            "description": "Book not found."
          }
        },
        "tags": ["Recently Visited Books"]
      },
      "get": {
        "summary": "Retrieves the list of recently visited books.",
        "description": "Returns a list of books that the user has recently visited, populated with detailed information about each book.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the list of recently visited books."
          },
          "401": {
            "description": "Unauthorized if the user is not authenticated."
          },
          "404": {
            "description": "No recently visited books found."
          }
        },
        "tags": ["Recently Visited Books"]
      },
      "all": {
        "summary": "Handles unsupported methods.",
        "description": "Returns an error if an unsupported HTTP method is used.",
        "responses": {
          "405": {
            "description": "Method not supported."
          }
        },
        "tags": ["Recently Visited Books"]
      }
    },
    "/user-book-history": {
      "get": {
        "summary": "Retrieve book history for a user.",
        "description": "Retrieves the book history including lending and returning records for the requesting user.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved book history.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BookHistory"
                  }
                }
              }
            }
          },
          "404": {
            "description": "No book history found for this user."
          }
        },
        "tags": ["User Book History"]
      },
      "all": {
        "summary": "Handles unsupported methods.",
        "description": "Returns an error if an unsupported HTTP method is used.",
        "responses": {
          "405": {
            "description": "Method not supported."
          }
        },
        "tags": ["User Book History"]
      }
    },
    "/user-book-history/{bookId}": {
      "get": {
        "summary": "Retrieve history of a specific book for a user.",
        "description": "Fetches the lending and returning history of a specific book as it relates to the requesting user.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "bookId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the book."
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved book history.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BookHistory"
                }
              }
            }
          },
          "404": {
            "description": "No relevant book history found for this book."
          }
        },
        "tags": ["User Book History"]
      },
      "all": {
        "summary": "Handles unsupported methods.",
        "description": "Returns an error if an unsupported HTTP method is used.",
        "responses": {
          "405": {
            "description": "Method not supported."
          }
        },
        "tags": ["User Book History"]
      }
    },
    "/user-requested-books": {
      "get": {
        "summary": "Retrieves a list of requested books for the authenticated user.",
        "description": "Returns a list of all books requested by the authenticated user, including details like book ID, title, and status.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "List of requested books retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "total": {
                      "type": "integer",
                      "description": "Total number of requested books."
                    },
                    "requestBooks": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "_id": {
                            "type": "string",
                            "description": "The unique identifier of the book."
                          },
                          "title": {
                            "type": "string",
                            "description": "The title of the book."
                          },
                          "status": {
                            "type": "string",
                            "description": "The status of the request (e.g., pending, approved, rejected)."
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "No books found for this user."
          }
        },
        "tags": ["User Requested Books"]
      },
      "all": {
        "summary": "Handles unsupported methods.",
        "description": "Returns an error if an unsupported HTTP method is used.",
        "responses": {
          "405": {
            "description": "Method not supported."
          }
        },
        "tags": ["User Requested Books"]
      }
    },
    "/user-requested-books/{requestedBookId}": {
      "get": {
        "summary": "Retrieves details of a specific requested book.",
        "description": "Returns the details of a specific requested book identified by its unique ID.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "requestedBookId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The unique identifier of the requested book."
          }
        ],
        "responses": {
          "200": {
            "description": "Requested book details retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "_id": {
                      "type": "string",
                      "description": "The unique identifier of the book."
                    },
                    "title": {
                      "type": "string",
                      "description": "The title of the book."
                    },
                    "status": {
                      "type": "string",
                      "description": "The status of the request."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Requested book not found."
          }
        },
        "tags": ["User Requested Books"]
      },
      "delete": {
        "summary": "Deletes a specific requested book.",
        "description": "Removes a specific requested book identified by its unique ID from the user's requested books list.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "requestedBookId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The unique identifier of the requested book to be deleted."
          }
        ],
        "responses": {
          "200": {
            "description": "Requested book deleted successfully."
          },
          "404": {
            "description": "Requested book not found or already deleted."
          }
        },
        "tags": ["User Requested Books"]
      },
      "all": {
        "summary": "Handles unsupported methods.",
        "description": "Returns an error if an unsupported HTTP method is used.",
        "responses": {
          "405": {
            "description": "Method not supported."
          }
        },
        "tags": ["User Requested Books"]
      }
    },
    "/activity": {
      "get": {
        "summary": "Fetch user activity information.",
        "description": "Retrieves activity-related information for a user. Only authorized users can access this endpoint.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "User activity information retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "userId": {
                      "type": "string",
                      "description": "Unique identifier of the user."
                    },
                    "lastLogin": {
                      "type": "string",
                      "format": "date-time",
                      "description": "Last login time of the user."
                    },
                    "lastActivity": {
                      "type": "string",
                      "format": "date-time",
                      "description": "Last activity time of the user."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access."
          },
          "404": {
            "description": "User not found."
          }
        },
        "tags": ["User Management"]
      },
      "all": {
        "summary": "Handles unsupported methods for user activity route.",
        "responses": {
          "405": {
            "description": "Method not supported."
          }
        },
        "tags": ["User Management"]
      }
    },
    "/security": {
      "get": {
        "summary": "Fetches the security log for the authenticated user.",
        "description": "Retrieves the security log of the user, including all security-related activities.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Security activities retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "userId": {
                      "type": "string",
                      "description": "Unique identifier of the user."
                    },
                    "twoFactorEnabled": {
                      "type": "boolean",
                      "description": "Indicates if two-factor authentication is enabled."
                    },
                    "activities": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "category": {
                            "type": "string"
                          },
                          "description": {
                            "type": "string"
                          },
                          "date": {
                            "type": "string",
                            "format": "date-time"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Please log in first."
          },
          "404": {
            "description": "User not found."
          },
          "500": {
            "description": "Internal server error."
          }
        },
        "tags": ["User Log Management"]
      },
      "all": {
        "summary": "Handles unsupported methods.",
        "responses": {
          "405": {
            "description": "Method not supported."
          }
        },
        "tags": ["User Log Management"],
        "description": "Returns an error if an unsupported HTTP method is used."
      }
    },
    "/account": {
      "get": {
        "summary": "Fetches the account log for the authenticated user.",
        "description": "Retrieves the activity log of the user associated with account-related changes.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Account activities retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "activities": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "category": {
                            "type": "string"
                          },
                          "description": {
                            "type": "string"
                          },
                          "date": {
                            "type": "string",
                            "format": "date-time"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Please log in first."
          },
          "500": {
            "description": "Internal server error."
          }
        },
        "tags": ["User Log Management"]
      },
      "all": {
        "summary": "Handles unsupported methods.",
        "description": "Returns an error if an unsupported HTTP method is used.",
        "responses": {
          "405": {
            "description": "Method not supported."
          }
        },
        "tags": ["User Log Management"]
      }
    },
    "/writers": {
      "post": {
        "summary": "Creates a new writer.",
        "description": "Allows authorized users to create new writer profiles, which include uploading images.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Full name of the writer."
                  },
                  "biography": {
                    "type": "string",
                    "description": "Short biography of the writer."
                  },
                  "image": {
                    "type": "string",
                    "format": "binary",
                    "description": "Image file of the writer."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Writer created successfully."
          },
          "400": {
            "description": "Invalid input, object invalid."
          }
        },
        "tags": ["Writer Management"]
      },
      "get": {
        "summary": "Retrieves a list of writers.",
        "description": "Provides a list of all writers, optionally filtered by query parameters.",
        "parameters": [
          {
            "in": "query",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "description": "Name to filter by."
          }
        ],
        "responses": {
          "200": {
            "description": "A list of writers.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Writer"
                  }
                }
              }
            }
          }
        },
        "tags": ["Writer Management"]
      },
      "delete": {
        "summary": "Deletes multiple writers.",
        "description": "Allows authorized users to delete multiple writers based on a list of IDs.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "ids": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Writers deleted successfully."
          }
        },
        "tags": ["Writer Management"]
      },
      "all": {
        "summary": "Handles unsupported methods for writers endpoint.",
        "responses": {
          "405": {
            "description": "Method not supported."
          }
        },
        "tags": ["Writer Management"]
      }
    },
    "/writers/{id}": {
      "get": {
        "summary": "Retrieves a writer by ID.",
        "description": "Provides detailed information about a writer identified by their ID.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Unique identifier of the writer."
          }
        ],
        "responses": {
          "200": {
            "description": "Detailed writer information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Writer"
                }
              }
            }
          }
        },
        "tags": ["Writer Management"]
      },
      "put": {
        "summary": "Updates a writer.",
        "description": "Allows authorized users to update writer information including uploading a new image.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Unique identifier of the writer to update."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Full name of the writer."
                  },
                  "biography": {
                    "type": "string",
                    "description": "Short biography of the writer."
                  },
                  "image": {
                    "type": "string",
                    "format": "binary",
                    "description": "New image file of the writer."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Writer updated successfully."
          }
        },
        "tags": ["Writer Management"]
      },
      "delete": {
        "summary": "Deletes a writer.",
        "description": "Allows authorized users to delete a writer identified by their ID.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Unique identifier of the writer to be deleted."
          }
        ],
        "responses": {
          "200": {
            "description": "Writer deleted successfully."
          }
        },
        "tags": ["Writer Management"]
      },
      "all": {
        "summary": "Handles unsupported methods for individual writer endpoint.",
        "responses": {
          "405": {
            "description": "Method not supported."
          }
        },
        "tags": ["Writer Management"]
      }
    },
    "/status": {
      "get": {
        "summary": "Status check.",
        "description": "This endpoint checks the current status of the application to ensure it is running properly.",
        "responses": {
          "200": {
            "description": "Application is running."
          },
          "500": {
            "description": "Error in application status."
          }
        },
        "tags": ["Status"]
      }
    },
    "/test-uncaught-exception": {
      "get": {
        "summary": "Test uncaught exception.",
        "description": "This endpoint is used to test the handling of uncaught exceptions within the application.",
        "responses": {
          "500": {
            "description": "Uncaught exception occurred and handled."
          }
        },
        "tags": ["Test Uncaught Exception"]
      }
    },
    "/*": {
      "all": {
        "summary": "Handle undefined routes.",
        "description": "Returns an error response for any requests made to undefined routes.",
        "responses": {
          "404": {
            "description": "Invalid route!"
          },
          "500": {
            "description": "Internal server error."
          }
        },
        "tags": ["Error Handling"]
      }
    }
  },
  "components": {},
  "tags": []
}
